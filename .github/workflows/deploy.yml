name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names vy-accruals || \
        aws ecr create-repository --repository-name vy-accruals

    - name: Apply ECR lifecycle policy
      run: |
        aws ecr put-lifecycle-policy \
          --repository-name vy-accruals \
          --lifecycle-policy-text file://ecr-lifecycle-policy.json

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REPOSITORY: vy-accruals
        IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
        docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Prepare variables for deployment
      id: vars
      run: |
        echo "IMAGE_TAG=${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}" >> $GITHUB_ENV
        echo "NODE_ENV=${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}" >> $GITHUB_ENV
        echo "PORT=${{ github.ref == 'refs/heads/main' && '3000' || '3001' }}" >> $GITHUB_ENV
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

    - name: Create SSH key from base64
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ vars.EC2_SSH_KEY_BASE64 }}" | base64 -d > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Проверяем ключ
        echo "SSH key info:"
        ssh-keygen -l -f ~/.ssh/deploy_key || echo "Key format check completed"

    - name: Create .env file
      run: |
        cat > .env <<EOF
        NODE_ENV=${{ vars.NODE_ENV }}
        DATABASE_URL=${{ vars.DATABASE_URL }}
        PORT=${{ vars.PORT }}
        AWS_REGION=${{ vars.AWS_REGION }}
        S3_BUCKET=${{ vars.S3_BUCKET }}
        TELEGRAM_BOT_TOKEN=${{ vars.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHANNEL_ID=${{ vars.TELEGRAM_CHANNEL_ID }}
        EOF

    - name: Create docker-compose.yml
      run: |
        cat > docker-compose.yml <<EOF
        version: '3.8'
        services:
          app:
            image: ${ECR_REGISTRY}/vy-accruals:${IMAGE_TAG}
            ports:
              - "3000:3000"
            env_file:
              - .env
            volumes:
              - /var/log/vy-accruals:/var/log/vy-accruals
            restart: always
        EOF

    - name: Copy files to EC2
      run: |
        scp -i deploy_key.pem -o StrictHostKeyChecking=no docker-compose.yml .env ${{ vars.EC2_USERNAME }}@${{ vars.EC2_HOST }}:~/

    - name: Deploy on EC2
      run: |
        ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ vars.EC2_USERNAME }}@${{ vars.EC2_HOST }} << 'EOF'
          export AWS_ACCESS_KEY_ID=${{ vars.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ vars.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=eu-north-1
          export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          export IMAGE_TAG=${{ env.IMAGE_TAG }}
          cd ~
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker-compose pull
          docker-compose up -d
          sleep 5

          # Получаем имя контейнера (например, vy-accruals-app-1)
          CONTAINER_ID=$(docker-compose ps -q app)

          # Проверим статус контейнера
          STATUS=$(docker inspect --format='{{.State.Status}}' "$CONTAINER_ID")

          if [ "$STATUS" != "running" ]; then
            echo "❌ Контейнер завершился со статусом '$STATUS'"
            docker logs "$CONTAINER_ID"
            exit 1
          fi

          # Выполнить миграции
          docker exec "$CONTAINER_ID" npx prisma migrate deploy
          docker system prune -af --volumes
        EOF

    - name: Cleanup
      run: |
        rm deploy_key.pem docker-compose.yml .env
