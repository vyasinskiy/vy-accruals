import { Accrual, Account } from '@prisma/client';
import { logger } from '../helpers/logger';

interface Invoice extends Accrual {
    account: Account;
}

export const sendInvoiceToTelegram = async (invoice: Invoice) => {
    try {
        const token = process.env.TELEGRAM_BOT_TOKEN;
        const channelId = process.env.TELEGRAM_CHANNEL_ID;

        if (!token || !channelId || !invoice.s3InvoiceUrl) {
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let text = `üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${invoice.account.organizationName}
üè† –ê–¥—Ä–µ—Å: ${invoice.account.address}
üìÖ –ü–µ—Ä–∏–æ–¥: ${invoice.periodName}\n
üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${invoice.totalSum}—Ä—É–±.`;

        // –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (invoice.fine && invoice.fine.toNumber() > 0) {
            text += `\n‚ö†Ô∏è –®—Ç—Ä–∞—Ñ: ${invoice.fine.toNumber()}—Ä—É–±.`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (invoice.inBalance) {
            text += `\nüí≥ –û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: ${invoice.inBalance.toNumber()}—Ä—É–±.`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ —Å—É–º–º—ã —Å—á–µ—Ç–∞
        if (
            invoice.inBalance &&
            invoice.totalSum &&
            invoice.inBalance.toNumber() > invoice.totalSum.toNumber()
        ) {
            text += `\n\n‚ùó –û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—É–º–º—É —Ç–µ–∫—É—â–µ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏`;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º
        const sanitize = (value: string) => value.trim().replace(/\s+/g, '_');
        const organizationName = sanitize(invoice.account.organizationName);
        const periodName = sanitize(invoice.periodName ?? invoice.periodId.toString());
        const totalSum = invoice.totalSum?.toNumber() ?? 0;
        const fileName = `${organizationName}_${periodName}_${totalSum}—Ä—É–±.pdf`;

        const fetchFn = (globalThis as any).fetch as any;
        const fileResponse = await fetchFn(invoice.s3InvoiceUrl);
        const fileBuffer = await fileResponse.arrayBuffer();

        const url = `https://api.telegram.org/bot${token}/sendDocument`;

        const formData = new FormData();
        formData.append('chat_id', channelId);
        formData.append('caption', text);
        formData.append('document', new Blob([fileBuffer]), fileName);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        await fetchFn(url, {
            method: 'POST',
            body: formData,
        });
    } catch (error) {
        const message = (error as Error).message;
        logger.error(`sendInvoiceToTelegram: ${message}`);
        throw error;
    }
};
